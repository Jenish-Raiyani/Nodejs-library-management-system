<!DOCTYPE html>
<html lang="en">

<head>
  <!-- META SECTION -->
  <title>Add Book </title>

  

   <link rel="stylesheet" href="/css/search.css">
  

</head>

<body>


  <div class="home-content" style="background-color: rgb(255, 255, 255);">
  
      <div class="col-lg-6 col-5 text-right" style="float: right;margin-bottom: 20px;">
          <a href="/viewissuebooklist" class="btn btn-sm btn-neutral" target="_blank">View Issued Books</a>  
        </div>
    

    <div class="container">
      
     
      <div class="container mt-4">
         {{#if message}}
          <div class="alert alert-success alert-dismissible fade show" id="alertdiv" role="alert">
              <span class="alert-icon"><i class="ni ni-like-2"></i></span>
              <span class="alert-text">{{message}}</span>
              <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
          </div>
      {{/if}}
       <form action="/searchbook" class="search-form" method="post" autocomplete="off">

            <div class="input-group mb-3">
              <div class="input-group-prepend">
                <select class="form-control select" name="option">
                  <option>Book_title</option>
                  <option>ISBN</option>
                  <option>Authors</option>
                  <option>Publisher</option>
                </select>
              </div>
              <input type="text" class="form-control" name="term" placeholder="Search" aria-label="Search"
                aria-describedby="button-addon2" onkeyup="sendData(this)" id="myInput">

              <div class="input-group-append">
                <button class="btn btn-secondary" type="submit" id="button-addon2">Search</button>
              </div>
            </div>

          </form>
           <section id="searchResults">

          </section>
          
        

      </div>



    </div>
    <div class="container">
       <div class="card">
            <!-- Card header -->
            <div class="card-header border-0">
             {{!-- <h3 class="mb-0">Books List</h3> --}}
               
                     <input type="text" name="search" id="search" class="form-control" placeholder="Search Book" />  
            </div>
            
            <!-- Light table -->
            <div class="table-responsive">
              <div>
                <table class="table align-items-center">
                  <thead class="thead-light">
                    <tr>
                    
                      <th scope="col">ISBN</th>
                      <th scope="col">Title</th>
                      <th scope="col">Edition</th>
                      <th scope="col">Total Copies</th>
                      <th scope="col">Authors</th>
                   
                    </tr>
                  </thead>
                  <tbody class="list">

                    {{#each result}}
                    <tr>
                       
                      <td>{{this.ISBN}}</td>
                      <td>{{this.Book_title}}</td>
                      <td>{{this.Edition}}</td>
                      <td>{{this.Total_copies}}</td>
                      <td>{{this.Authors}}</td>
                      <td><button type="button" class="btn btn-outline-success btn-sm"><a
                            href="issuebook/addDetails/{{this.id}}" target="_blank">+</a></button></td>
                     

                    </tr>
                    {{/each}}


                  </tbody>
                </table>
              </div>
              <!-- Card footer -->
              <div class="card-footer py-4">
                <nav aria-label="...">
                 
                </nav>
              </div>
            </div>
          </div>

    </div>
    
  </div>

  
 
 


<script>
    const searchResults = document.getElementById('searchResults');
    function sendData(e){
        fetch('getbook',{ 
            method: 'POST',
            headers : {'Content-Type':'application/json'},
            body : JSON.stringify({payload:e.value})
        }).then(res => res.json()).then(data =>{
            
            let payload = data.payload;
              console.log(payload);     
            searchResults.innerHTML = '';
            if(payload.length < 1){
                 searchResults.innerHTML += `<p>Sorry. Nothing Found.</p>`;
                 return
            }
            
            payload.forEach((item,index)=>{
                {{!-- if(index > 0) searchResults.innerHTML += '<hr>';
                
               
                searchResults.innerHTML += `<p>${item.Book_title}</p>`; --}}
                let books = [];
                books.push(item.Book_title);
                console.log(books);
                  autocomplete(document.getElementById("myInput"), books);
            })
          
        });
    }
 
  
    function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}
</script>



<script>
  setTimeout(function() {
    $('#alertdiv').fadeOut('fast');
}, 2000); // <-- time in milliseconds
</script>
</body>

</html>